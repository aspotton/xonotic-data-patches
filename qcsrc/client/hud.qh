float log(float f);

float panel_order[HUD_PANEL_NUM];
string hud_panelorder_prev;

vector mousepos;
vector panel_click_distance; // mouse cursor distance from the top left corner of the panel (saved only upon a click)
vector panel_click_resizeorigin; // coordinates for opposite point when resizing
float resizeCorner; // 1 = topleft, 2 = topright, 3 = bottomleft, 4 = bottomright
var float highlightedPanel = -1;
float highlightedAction; // 0 = nothing, 1 = move, 2 = resize

const float BORDER_MULTIPLIER = 0.25;
float scoreboard_bottom;
float weapon_accuracy[WEP_MAXCOUNT];

#define MAX_ACCURACY_LEVELS 10
float acc_lev[MAX_ACCURACY_LEVELS];
vector acc_col[MAX_ACCURACY_LEVELS];
float acc_levels;
string acc_color_levels;

float complain_weapon;
string complain_weapon_name;
float complain_weapon_type;
float complain_weapon_time;

float ps_primary, ps_secondary;
float ts_primary, ts_secondary;

float last_weapon;
float weapontime;
float weaponprevtime;

float teamnagger;

float hud_configure_checkcollisions;
float hud_configure_prev;
vector hud_configure_gridSize;
vector hud_configure_realGridSize;

float hudShiftState;
const float S_SHIFT = 1;
const float S_CTRL = 2;
const float S_ALT = 4;

float menu_enabled; // 1 showing the entire HUD, 2 showing only the clicked panel
float menu_enabled_time;

float hud_fade_alpha;

string hud_skin_path;

var vector progressbar_color;

var float highlightedPanel_backup = -1;
var vector panel_pos_backup;
var vector panel_size_backup;

var float highlightedPanel_copied = -1; //this is good only to know if there is something copied
var vector panel_size_copied;

var float hud_configure_active_panel; // this panel has recently referred the UpdateCvars macro
var string panel_name;
var float panel_enabled;
var vector panel_pos;
var vector panel_size;
var string panel_bg;
var string panel_bg_str; // "_str" vars contain the raw value of the cvar, non-"_str" contains what hud.qc code should use
var vector panel_bg_color;
var string panel_bg_color_str;
var float panel_bg_color_team;
var string panel_bg_color_team_str;
var float panel_fg_alpha;
var float panel_bg_alpha;
var string panel_bg_alpha_str;
var float panel_bg_border;
var string panel_bg_border_str;
var float panel_bg_padding;
var string panel_bg_padding_str;

float current_player;

// Because calling lots of functions in QC apparently cuts fps in half on many machines:
// ----------------------
// MACRO HELL STARTS HERE
// ----------------------
// Little help for the poor people who have to make sense of this: Start from the bottom ;)

#define HUD_Panel_GetProgressBarColor(item) \
		progressbar_color = stov(cvar_string("hud_progressbar_" #item "_color"))
#define HUD_Panel_GetProgressBarColorForString(item) \
switch(item) {\
	case "health": HUD_Panel_GetProgressBarColor(health); break;\
	case "armor": HUD_Panel_GetProgressBarColor(armor); break;\
	case "strength": HUD_Panel_GetProgressBarColor(strength); break;\
	case "shield": HUD_Panel_GetProgressBarColor(shield); break;\
	case "fuel": HUD_Panel_GetProgressBarColor(fuel); break;\
	case "nexball": HUD_Panel_GetProgressBarColor(nexball); break;\
	case "speed": HUD_Panel_GetProgressBarColor(speed); break;\
	case "acceleration": HUD_Panel_GetProgressBarColor(acceleration); break;\
	case "acceleration_neg": HUD_Panel_GetProgressBarColor(acceleration_neg); break;\
} ENDS_WITH_CURLY_BRACE

// Get value for panel_bg: if "" fetch default, else use panel_bg_str
// comment on last line of macro: // we probably want to see a background in config mode at all times...
#define HUD_Panel_GetBg()\
if(!autocvar__hud_configure && panel_bg_str == "0") {\
	panel_bg = "0";\
} else {\
	if(panel_bg_str == "") {\
		panel_bg_str = autocvar_hud_panel_bg;\
	}\
	if(panel_bg_str == "0" && !autocvar__hud_configure) {\
			panel_bg = "0";\
	} else {\
		if (panel_bg_str == "0" && autocvar__hud_configure)\
			panel_bg_alpha_str = "0";\
		panel_bg = strcat(hud_skin_path, "/", panel_bg_str);\
		if(precache_pic(panel_bg) == "") {\
			panel_bg = strcat(hud_skin_path, "/", "border_default");\
			if(precache_pic(panel_bg) == "") {\
				panel_bg = strcat("gfx/hud/default/", "border_default");\
			}\
		}\
	}\
}

// Get value for panel_bg_color: if "" fetch default, else use panel_bg_color. Convert pants, shirt or teamcolor into a vector.
#define HUD_Panel_GetColor()\
if((teamplay) && panel_bg_color_team) {\
	panel_bg_color = colormapPaletteColor(mod(stof(getplayerkey(current_player - 1, "colors")), 16), 1) * panel_bg_color_team;\
} else if (autocvar_hud_configure_teamcolorforced && autocvar__hud_configure && panel_bg_color_team) {\
	panel_bg_color = '1 0 0' * panel_bg_color_team;\
} else {\
	if(panel_bg_color_str == "") {\
		panel_bg_color = autocvar_hud_panel_bg_color;\
	} else {\
		if(panel_bg_color_str == "shirt") {\
			panel_bg_color = colormapPaletteColor(floor(stof(getplayerkey(current_player - 1, "colors")) / 16), 0);\
		} else if(panel_bg_color_str == "pants") {\
			panel_bg_color = colormapPaletteColor(mod(stof(getplayerkey(current_player - 1, "colors")), 16), 1);\
		} else {\
			panel_bg_color = stov(panel_bg_color_str);\
		}\
	}\
}

// Get value for panel_bg_color_team: if "" fetch default, else use panel_bg_color_team_str
#define HUD_Panel_GetColorTeam()\
if(panel_bg_color_team_str == "") {\
	panel_bg_color_team = autocvar_hud_panel_bg_color_team;\
} else {\
	panel_bg_color_team = stof(panel_bg_color_team_str);\
}

// the check doesn't allow to fade this panel when showing the panel-specific menu dialog
#define HUD_Panel_ApplyFadeAlpha()\
if(!(menu_enabled == 2 && highlightedPanel == hud_configure_active_panel))\
{\
	panel_bg_alpha *= hud_fade_alpha;\
	panel_fg_alpha *= hud_fade_alpha;\
} ENDS_WITH_CURLY_BRACE

// Get value for panel_bg_alpha: if "" fetch default, else use panel_bg_alpha. Also do various menu dialog fadeout/in checks, and minalpha checks
// comment on line 3 of macro: // do not set a minalpha cap when showing the config dialog for this panel
#define HUD_Panel_GetBgAlpha()\
if(panel_bg_alpha_str == "") {\
	panel_bg_alpha_str = ftos(autocvar_hud_panel_bg_alpha);\
}\
panel_bg_alpha = stof(panel_bg_alpha_str);\
if(autocvar__hud_configure) {\
	if(!panel_enabled)\
		panel_bg_alpha = 0.25;\
	else if(menu_enabled == 2 && highlightedPanel == hud_configure_active_panel)\
		panel_bg_alpha = (1 - autocvar__menu_alpha) * max(cvar("hud_configure_bg_minalpha"), panel_bg_alpha) + autocvar__menu_alpha * panel_bg_alpha;\
	else\
		panel_bg_alpha = max(cvar("hud_configure_bg_minalpha"), panel_bg_alpha);\
}

// Get value for panel_fg_alpha. Also do various minalpha checks
// comment on line 2 of macro: // ALWAYS show disabled panels at 0.25 alpha when in config mode
#define HUD_Panel_GetFgAlpha()\
panel_fg_alpha = autocvar_hud_panel_fg_alpha;\
if(autocvar__hud_configure && !panel_enabled)\
	panel_fg_alpha = 0.25;\

// Get border. See comments above, it's similar.
#define HUD_Panel_GetBorder()\
if(panel_bg_border_str == "") {\
	panel_bg_border = autocvar_hud_panel_bg_border;\
} else {\
	panel_bg_border = stof(panel_bg_border_str);\
} ENDS_WITH_CURLY_BRACE

// Scale the pos and size vectors to absolute coordinates
#define HUD_Panel_GetScaledVectors()\
panel_pos_x *= vid_conwidth;\
panel_pos_y *= vid_conheight;\
panel_size_x *= vid_conwidth;\
panel_size_y *= vid_conheight;

// Get padding. See comments above, it's similar.
// last line is a port of the old function, basically always make sure the panel contents are at least 5 pixels tall/wide, to disallow extreme padding values
#define HUD_Panel_GetPadding()\
if(panel_bg_padding_str == "") {\
	panel_bg_padding = autocvar_hud_panel_bg_padding;\
} else {\
	panel_bg_padding = stof(panel_bg_padding_str);\
}\
panel_bg_padding = min(min(panel_size_x, panel_size_y)/2 - 5, panel_bg_padding);

// Point to the macros above (stupid max macro length)
#define HUD_Panel_GetStringVars()\
HUD_Panel_GetBg()\
if (panel_bg != "0") {\
	HUD_Panel_GetColorTeam()\
	HUD_Panel_GetColor()\
	HUD_Panel_GetBgAlpha()\
	HUD_Panel_GetBorder()\
}\
HUD_Panel_GetFgAlpha()\
HUD_Panel_GetScaledVectors()\
HUD_Panel_GetPadding()

// return smoothly faded pos of given panel when a dialog is active
var vector menu_enable_panelpos;
#define HUD_Panel_GetMenuPos() \
if(panel_size_x > panel_size_y)\
	menu_enable_panelpos = eX * 0.5 * vid_conwidth - eX * 0.5 * panel_size_x + eY * 0.82 * vid_conheight;\
else\
	menu_enable_panelpos = eY * 0.5 * vid_conheight - eY * 0.5 * panel_size_y + eX * 0.7 * vid_conwidth;\
panel_pos = (1 - autocvar__menu_alpha) * panel_pos + (autocvar__menu_alpha) * menu_enable_panelpos;

// return smoothly faded size of given panel when a dialog is active
//var vector menu_enable_maxsize;
var float menu_enable_maxsize_x;
var float menu_enable_maxsize_y;
var vector menu_enable_size;
#define HUD_Panel_GetMenuSize()\
menu_enable_maxsize_x = 0.3 * vid_conwidth;\
menu_enable_maxsize_y = 0.18 * vid_conheight;\
if(panel_size_x > panel_size_y)\
{\
	if(panel_size_y > menu_enable_maxsize_y)\
	{\
		menu_enable_size_y = menu_enable_maxsize_y;\
		menu_enable_size_x = panel_size_x * (menu_enable_maxsize_y/panel_size_y);\
		panel_size = (1 - autocvar__menu_alpha) * panel_size + (autocvar__menu_alpha) * menu_enable_size;\
	}\
}\
else\
{\
	if(panel_size_x > menu_enable_maxsize_x)\
	{\
		menu_enable_size_x = menu_enable_maxsize_x;\
		menu_enable_size_y = panel_size_y * (menu_enable_maxsize_x/panel_size_x);\
		panel_size = (1 - autocvar__menu_alpha) * panel_size + (autocvar__menu_alpha) * menu_enable_size;\
	}\
}

// Update all common cvars of given panel name
#define HUD_Panel_UpdateCvars(name) \
panel_enabled = autocvar_hud_panel_##name; \
panel_pos = stov(cvar_string("hud_panel_" #name "_pos")); \
panel_size = stov(cvar_string("hud_panel_" #name "_size")); \
panel_bg_str = cvar_string("hud_panel_" #name "_bg"); \
panel_bg_color_str = cvar_string("hud_panel_" #name "_bg_color"); \
panel_bg_color_team_str = cvar_string("hud_panel_" #name "_bg_color_team"); \
panel_bg_alpha_str = cvar_string("hud_panel_" #name "_bg_alpha"); \
panel_bg_border_str = cvar_string("hud_panel_" #name "_bg_border"); \
panel_bg_padding_str = cvar_string("hud_panel_" #name "_bg_padding"); \
HUD_Panel_GetStringVars()\
if(menu_enabled == 2 && hud_configure_active_panel == highlightedPanel) {\
	HUD_Panel_GetMenuSize()\
	HUD_Panel_GetMenuPos()\
} ENDS_WITH_CURLY_BRACE

// FTEQCC I HATE YOU WHY DO YOU MAKE ME DO THIS??? :(
// max macro length is 1024 characters, I must split it up :(

// Update all common cvars of given panel id
#define HUD_Panel_UpdateCvarsForId_Part2(id) \
switch(id) { \
	case HUD_PANEL_INFOMESSAGES: HUD_Panel_UpdateCvars(infomessages) break; \
	case HUD_PANEL_PHYSICS: HUD_Panel_UpdateCvars(physics); break;\
	case HUD_PANEL_CENTERPRINT: HUD_Panel_UpdateCvars(centerprint); break;\
}

#define HUD_Panel_UpdateCvarsForId(id) \
switch(id) { \
	case HUD_PANEL_WEAPONS: HUD_Panel_UpdateCvars(weapons) break; \
	case HUD_PANEL_AMMO: HUD_Panel_UpdateCvars(ammo) break; \
	case HUD_PANEL_POWERUPS: HUD_Panel_UpdateCvars(powerups) break; \
	case HUD_PANEL_HEALTHARMOR: HUD_Panel_UpdateCvars(healtharmor) break; \
	case HUD_PANEL_NOTIFY: HUD_Panel_UpdateCvars(notify) break; \
	case HUD_PANEL_TIMER: HUD_Panel_UpdateCvars(timer) break; \
	case HUD_PANEL_RADAR: HUD_Panel_UpdateCvars(radar) break; \
	case HUD_PANEL_SCORE: HUD_Panel_UpdateCvars(score) break; \
	case HUD_PANEL_RACETIMER: HUD_Panel_UpdateCvars(racetimer) break; \
	case HUD_PANEL_VOTE: HUD_Panel_UpdateCvars(vote) break; \
	case HUD_PANEL_MODICONS: HUD_Panel_UpdateCvars(modicons) break; \
	case HUD_PANEL_PRESSEDKEYS: HUD_Panel_UpdateCvars(pressedkeys) break; \
	case HUD_PANEL_CHAT: HUD_Panel_UpdateCvars(chat) break; \
	case HUD_PANEL_ENGINEINFO: HUD_Panel_UpdateCvars(engineinfo) break; \
	default: HUD_Panel_UpdateCvarsForId_Part2(id)\
}

#define HUD_Panel_UpdatePosSize(name) \
panel_pos = stov(cvar_string("hud_panel_" #name "_pos")); \
panel_size = stov(cvar_string("hud_panel_" #name "_size")); \
HUD_Panel_GetScaledVectors()\
if(menu_enabled == 2 && hud_configure_active_panel == highlightedPanel) {\
	HUD_Panel_GetMenuSize()\
	HUD_Panel_GetMenuPos()\
}\
panel_bg_border_str = cvar_string("hud_panel_" #name "_bg_border"); \
HUD_Panel_GetBorder()

// Update pos and size of given panel id
#define HUD_Panel_UpdatePosSizeForId_Part2(id) \
switch(id) { \
	case HUD_PANEL_INFOMESSAGES: HUD_Panel_UpdatePosSize(infomessages) break;\
	case HUD_PANEL_PHYSICS: HUD_Panel_UpdatePosSize(physics); break;\
	case HUD_PANEL_CENTERPRINT: HUD_Panel_UpdatePosSize(centerprint); break;\
}

#define HUD_Panel_UpdatePosSizeForId(id) \
switch(id) { \
	case HUD_PANEL_WEAPONS: HUD_Panel_UpdatePosSize(weapons) break;\
	case HUD_PANEL_AMMO: HUD_Panel_UpdatePosSize(ammo) break;\
	case HUD_PANEL_POWERUPS: HUD_Panel_UpdatePosSize(powerups) break;\
	case HUD_PANEL_HEALTHARMOR: HUD_Panel_UpdatePosSize(healtharmor) break;\
	case HUD_PANEL_NOTIFY: HUD_Panel_UpdatePosSize(notify) break;\
	case HUD_PANEL_TIMER: HUD_Panel_UpdatePosSize(timer) break;\
	case HUD_PANEL_RADAR: HUD_Panel_UpdatePosSize(radar) break;\
	case HUD_PANEL_SCORE: HUD_Panel_UpdatePosSize(score) break;\
	case HUD_PANEL_RACETIMER: HUD_Panel_UpdatePosSize(racetimer) break;\
	case HUD_PANEL_VOTE: HUD_Panel_UpdatePosSize(vote) break;\
	case HUD_PANEL_MODICONS: HUD_Panel_UpdatePosSize(modicons) break;\
	case HUD_PANEL_PRESSEDKEYS: HUD_Panel_UpdatePosSize(pressedkeys) break;\
	case HUD_PANEL_CHAT: HUD_Panel_UpdatePosSize(chat) break;\
	case HUD_PANEL_ENGINEINFO: HUD_Panel_UpdatePosSize(engineinfo) break;\
	default: HUD_Panel_UpdatePosSizeForId_Part2(id)\
}
